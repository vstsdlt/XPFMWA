// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.EntityEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;
using PFML.Shared.Model.DbDtos;
using FACTS.Framework.DAL;

namespace PFML.DAL.Model.DbEntities
{

    /// <summary>[TaxRate]</summary>
    [Table("TaxRate", Schema="dbo")]
    public class TaxRate : BaseEntity
    {

        /// <summary>[TaxRate]</summary>
        [Required]
        [Column("TaxRate")]
        public decimal _TaxRate { get; set; }

        /// <summary>[CreateDateTime]</summary>
        [Required]
        [Column("CreateDateTime")]
        public DateTime CreateDateTime { get; set; }

        /// <summary>[CreateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("CreateUserId")]
        public string CreateUserId { get; set; }

        /// <summary>[EffectiveBeginDate]</summary>
        [Required]
        [Column("EffectiveBeginDate")]
        public DateTime EffectiveBeginDate { get; set; }

        /// <summary>[EffectiveEndDate]</summary>
        [Column("EffectiveEndDate")]
        public DateTime? EffectiveEndDate { get; set; }

        /// <summary>[TaxRateId]</summary>
        [Key]
        [Required]
        [Column("TaxRateId", Order=1)]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int TaxRateId { get; set; }

        /// <summary>[UpdateDateTime]</summary>
        [Required]
        [Column("UpdateDateTime")]
        [ConcurrencyCheck]
        public DateTime UpdateDateTime { get; set; }

        /// <summary>[UpdateNumber]</summary>
        [Column("UpdateNumber")]
        public int? UpdateNumber { get; set; }

        /// <summary>[UpdateProcess]</summary>
        [MaxLength(100)]
        [Column("UpdateProcess")]
        public string UpdateProcess { get; set; }

        /// <summary>[UpdateUserId]</summary>
        [Required]
        [MaxLength(50)]
        [Column("UpdateUserId")]
        public string UpdateUserId { get; set; }

        public override void SetAuditFields(EntityState state)
        {
            string username = FACTS.Framework.Service.Context.UserName ?? "UNKNOWN";
            DateTime timestamp = FACTS.Framework.Utility.DateTimeUtil.Now;

            if (state == EntityState.Added)
            {
                CreateUserId = username;
                CreateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = 0;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
            else if (state == EntityState.Modified)
            {
                UpdateUserId = username;
                UpdateDateTime = new System.Data.SqlTypes.SqlDateTime(timestamp).Value;
                UpdateNumber = (UpdateNumber ?? 0) + 1;
                UpdateProcess = FACTS.Framework.Utility.StringUtil.CapLength(FACTS.Framework.Service.Context.Process.ToString(), 100);
            }
        }

        internal static void ModelCreating(DbModelBuilder builder)
        {
            builder.Entity<TaxRate>().Property(x => x._TaxRate).HasPrecision(6, 3);
            builder.Entity<TaxRate>().Property(x => x.CreateUserId).IsUnicode(false);
            builder.Entity<TaxRate>().Property(x => x.UpdateProcess).IsUnicode(false);
            builder.Entity<TaxRate>().Property(x => x.UpdateUserId).IsUnicode(false);
        }

        /// <summary>Convert from TaxRate entity to DTO</summary>
        /// <param name="dbContext">DB Context to use for setting DTO state</param>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <param name="entityDtos">Used internally to track which entities have been converted to DTO's already (to avoid re-converting when circularly referenced)</param>
        /// <returns>Resultant TaxRate DTO</returns>
        public TaxRateDto ToDtoDeep(FACTS.Framework.DAL.DbContext dbContext, TaxRateDto dto = null, Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = null)
        {
            entityDtos = entityDtos ?? new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            if (entityDtos.ContainsKey(this))
            {
                return (TaxRateDto)entityDtos[this];
            }

            dto = ToDto(dto);
            entityDtos.Add(this, dto);

            System.Data.Entity.Infrastructure.DbEntityEntry<TaxRate> entry = dbContext?.Entry(this);
            dto.IsNew = (entry?.State == EntityState.Added);
            dto.IsDeleted = (entry?.State == EntityState.Deleted);


            return dto;
        }

        /// <summary>Convert from TaxRate entity to DTO w/o checking entity state or entity navigation</summary>
        /// <param name="dto">DTO to use if already created instead of creating new one (can be inherited class instead as opposed to base class)</param>
        /// <returns>Resultant TaxRate DTO</returns>
        public TaxRateDto ToDto(TaxRateDto dto = null)
        {

            dto = dto ?? new TaxRateDto();
            dto.IsNew = false;

            dto._TaxRate = _TaxRate;
            dto.CreateDateTime = CreateDateTime;
            dto.CreateUserId = CreateUserId;
            dto.EffectiveBeginDate = EffectiveBeginDate;
            dto.EffectiveEndDate = EffectiveEndDate;
            dto.TaxRateId = TaxRateId;
            dto.UpdateDateTime = UpdateDateTime;
            dto.UpdateNumber = UpdateNumber;
            dto.UpdateProcess = UpdateProcess;
            dto.UpdateUserId = UpdateUserId;

            return dto;
        }

        /// <summary>Convert from TaxRate DTO to entity</summary>
        /// <param name="dbContext">DB Context to use for attaching entity</param>
        /// <param name="dto">DTO to convert from</param>
        /// <param name="dtoEntities">Used internally to track which dtos have been converted to entites already (to avoid re-converting when circularly referenced)</param>
        /// <returns>Resultant TaxRate entity</returns>
        public static TaxRate FromDto(FACTS.Framework.DAL.DbContext dbContext, TaxRateDto dto, Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity> dtoEntities = null)
        {
            dtoEntities = dtoEntities ?? new Dictionary<FACTS.Framework.Dto.BaseDto, BaseEntity>();
            if (dtoEntities.ContainsKey(dto))
            {
                return (TaxRate)dtoEntities[dto];
            }

            TaxRate entity = new TaxRate();
            dtoEntities.Add(dto, entity);

            entity._TaxRate = dto._TaxRate;
            entity.CreateDateTime = dto.CreateDateTime;
            entity.CreateUserId = dto.CreateUserId;
            entity.EffectiveBeginDate = dto.EffectiveBeginDate;
            entity.EffectiveEndDate = dto.EffectiveEndDate;
            entity.TaxRateId = dto.TaxRateId;
            entity.UpdateDateTime = dto.UpdateDateTime;
            entity.UpdateNumber = dto.UpdateNumber;
            entity.UpdateProcess = dto.UpdateProcess;
            entity.UpdateUserId = dto.UpdateUserId;


            if (dbContext != null)
            {
                dbContext.Entry(entity).State = (dto.IsNew ? EntityState.Added : (dto.IsDeleted ? EntityState.Deleted : EntityState.Modified));
            }

            return entity;
        }

    }

    /// <summary>Extension methods related to TaxRate entity</summary>
    public static class TaxRateExtension
    {

        /// <summary>Convert IEnumerable TaxRate to list of DTOs</summary>
        /// <param name="entities">IEnumerable TaxRates</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <returns>List of DTO TaxRates</returns>
        public static List<TaxRateDto> ToDtoListDeep(this IEnumerable<TaxRate> entities, FACTS.Framework.DAL.DbContext dbContext)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<TaxRateDto> dtos = new List<TaxRateDto>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, entityDtos: entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E TaxRate to list of DTOs</summary>
        /// <param name="entities">L2E TaxRates</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <returns>List of DTO TaxRates</returns>
        public static List<TaxRateDto> ToDtoListDeep(this IQueryable<TaxRate> entities, FACTS.Framework.DAL.DbContext dbContext)
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<TaxRateDto> dtos = new List<TaxRateDto>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add(entity.ToDtoDeep(dbContext, entityDtos: entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert L2E TaxRate to list of customized DTOs</summary>
        /// <typeparam name="T">Custom DTO derived from TaxRateDto</typeparam>
        /// <param name="entities">L2E TaxRates</param>
        /// <param name="dbContext">DB Context to use for setting state of DTO</param>
        /// <returns>List of DTO customized TaxRates</returns>
        public static List<T> ToDtoListDeep<T>(this IQueryable<TaxRate> entities, FACTS.Framework.DAL.DbContext dbContext) where T : TaxRateDto, new()
        {
            Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto> entityDtos = new Dictionary<BaseEntity, FACTS.Framework.Dto.BaseDto>();
            List<T> dtos = new List<T>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add((T)entity.ToDtoDeep(dbContext, new T(), entityDtos));
            }
            return dtos;
        }

        /// <summary>Convert IEnumerable TaxRate to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">IEnumerable TaxRates</param>
        /// <returns>List of DTO TaxRates</returns>
        public static List<TaxRateDto> ToDtoList(this IEnumerable<TaxRate> entities)
        {
            List<TaxRateDto> dtos = new List<TaxRateDto>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E TaxRate to list of DTOs w/o checking entity state or entity navigation</summary>
        /// <param name="entities">L2E TaxRates</param>
        /// <returns>List of DTO TaxRates</returns>
        public static List<TaxRateDto> ToDtoList(this IQueryable<TaxRate> entities)
        {
            List<TaxRateDto> dtos = new List<TaxRateDto>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add(entity.ToDto());
            }
            return dtos;
        }

        /// <summary>Convert L2E TaxRate to list of customized DTOs w/o checking entity state or entity navigation</summary>
        /// <typeparam name="T">Custom DTO derived from TaxRateDto</typeparam>
        /// <param name="entities">L2E TaxRates</param>
        /// <returns>List of DTO customized TaxRates</returns>
        public static List<T> ToDtoList<T>(this IQueryable<TaxRate> entities) where T : TaxRateDto, new()
        {
            List<T> dtos = new List<T>();
            foreach (TaxRate entity in entities)
            {
                dtos.Add((T)entity.ToDto(new T()));
            }
            return dtos;
        }

    }

}
