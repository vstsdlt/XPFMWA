// ----------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a compiler emitter: FACTS.Framework.Analysis.Generators.DAL.ContextEmitter
//
// Changes to this file may cause incorrect behavior and will be lost when the code is regenerated.
// </auto-generated>
// ----------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Data.Entity.Core.Mapping;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Linq;
using PFML.DAL.Model.DbEntities;
using PFML.DAL.Model.DbRoutineResults;

namespace PFML.DAL.Model
{

    [DbConfigurationType(typeof(FACTS.Framework.DAL.DbConfigurationSqlServer))]
    public class DbContext : FACTS.Framework.DAL.DbContext
    {

        protected override string ModelPrefix { get { return "Db"; } }
        protected override string ModelVersion { get { return "180125164039"; } }

        /// <summary>Static initializer to remove initial calls to DB (not requred if not using migrations)</summary>
        static DbContext()
        {
            Database.SetInitializer<DbContext>(null);
        }

        /// <summary>Constructor</summary>
        public DbContext()
        {
            Database.Log = (log) =>
            {
                if (System.Diagnostics.Debugger.IsAttached)
                {
                    System.Diagnostics.Debug.WriteLine(log);
                }
                FACTS.Framework.Logging.Logger.LogDatabase(log);
            };
        }

        /// <summary>[Table: Address]</summary>
        public virtual DbSet<Address> Addresses { get; set; }

        /// <summary>[Table: AddressLink]</summary>
        public virtual DbSet<AddressLink> AddressLinks { get; set; }

        /// <summary>[Table: Document]</summary>
        public virtual DbSet<Document> Documents { get; set; }

        /// <summary>[Table: Employer]</summary>
        public virtual DbSet<Employer> Employers { get; set; }

        /// <summary>[Table: EmployerAccountTransaction]</summary>
        public virtual DbSet<EmployerAccountTransaction> EmployerAccountTransactions { get; set; }

        /// <summary>[Table: EmployerContact]</summary>
        public virtual DbSet<EmployerContact> EmployerContacts { get; set; }

        /// <summary>[Table: EmployerLiability]</summary>
        public virtual DbSet<EmployerLiability> EmployerLiabilities { get; set; }

        /// <summary>[Table: EmployerPreference]</summary>
        public virtual DbSet<EmployerPreference> EmployerPreferences { get; set; }

        /// <summary>[Table: EmployerUnit]</summary>
        public virtual DbSet<EmployerUnit> EmployerUnits { get; set; }

        /// <summary>[Table: Form]</summary>
        public virtual DbSet<Form> Forms { get; set; }

        /// <summary>[Table: FormAttachment]</summary>
        public virtual DbSet<FormAttachment> FormAttachments { get; set; }

        /// <summary>[Table: LookupCode]</summary>
        public virtual DbSet<LookupCode> LookupCodes { get; set; }

        /// <summary>[Table: LookupName]</summary>
        public virtual DbSet<LookupName> LookupNames { get; set; }

        /// <summary>[Table: LookupProperty]</summary>
        public virtual DbSet<LookupProperty> LookupProperties { get; set; }

        /// <summary>[Table: LookupValue]</summary>
        public virtual DbSet<LookupValue> LookupValues { get; set; }

        /// <summary>[Table: PaymentMain]</summary>
        public virtual DbSet<PaymentMain> PaymentMains { get; set; }

        /// <summary>[Table: PaymentProfile]</summary>
        public virtual DbSet<PaymentProfile> PaymentProfiles { get; set; }

        /// <summary>[Table: SecurityDefinition]</summary>
        public virtual DbSet<SecurityDefinition> SecurityDefinitions { get; set; }

        /// <summary>[Table: SecurityPermission]</summary>
        public virtual DbSet<SecurityPermission> SecurityPermissions { get; set; }

        /// <summary>[Table: TaxableAmountSum]</summary>
        public virtual DbSet<TaxableAmountSum> TaxableAmountSums { get; set; }

        /// <summary>[Table: TaxRate]</summary>
        public virtual DbSet<TaxRate> TaxRates { get; set; }

        /// <summary>[Table: VoluntaryPlanWaiverRequest]</summary>
        public virtual DbSet<VoluntaryPlanWaiverRequest> VoluntaryPlanWaiverRequests { get; set; }

        /// <summary>[Table: VoluntaryPlanWaiverRequestType]</summary>
        public virtual DbSet<VoluntaryPlanWaiverRequestType> VoluntaryPlanWaiverRequestTypes { get; set; }

        /// <summary>[Table: WageUnitDetail]</summary>
        public virtual DbSet<WageUnitDetail> WageUnitDetails { get; set; }

        ///<summary>IQueryable to use for returing only a single row from a DB query</summary>
        public IQueryable<LookupCode> DummyRecord { get { return LookupCodes.Take(1); } }

        /// <summary>DB Function: [fn_diagramobjects]</summary>
        [DbFunction("CodeFirstDatabaseSchema", "fn_diagramobjects")]
        public virtual int FNDiagramobject()
        {
            return (from x in DummyRecord select FNDiagramobject()).FirstOrDefault();
        }

        /// <summary>DB Procedure: [sp_alterdiagram]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPAlterdiagram(string diagramname, int? ownerID, int? version, byte[] definition)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            ObjectParameter versionParameter = version != null ? new ObjectParameter("version", version) : new ObjectParameter("version", typeof(int));
            ObjectParameter definitionParameter = definition != null ? new ObjectParameter("definition", definition) : new ObjectParameter("definition", typeof(byte[]));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, ownerIDParameter, versionParameter, definitionParameter);
        }

        /// <summary>DB Procedure: [sp_creatediagram]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPCreatediagram(string diagramname, int? ownerID, int? version, byte[] definition)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            ObjectParameter versionParameter = version != null ? new ObjectParameter("version", version) : new ObjectParameter("version", typeof(int));
            ObjectParameter definitionParameter = definition != null ? new ObjectParameter("definition", definition) : new ObjectParameter("definition", typeof(byte[]));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, ownerIDParameter, versionParameter, definitionParameter);
        }

        /// <summary>DB Procedure: [sp_dropdiagram]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPDropdiagram(string diagramname, int? ownerID)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, ownerIDParameter);
        }

        /// <summary>DB Procedure: [sp_helpdiagramdefinition]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPHelpdiagramdefinition(string diagramname, int? ownerID)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, ownerIDParameter);
        }

        /// <summary>DB Procedure: [sp_helpdiagrams]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPHelpdiagram(string diagramname, int? ownerID)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, ownerIDParameter);
        }

        /// <summary>DB Procedure: [sp_renamediagram]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPRenamediagram(string diagramname, int? ownerID, string newDiagramname)
        {
            ObjectParameter diagramnameParameter = diagramname != null ? new ObjectParameter("diagramname", diagramname) : new ObjectParameter("diagramname", typeof(string));
            ObjectParameter ownerIDParameter = ownerID != null ? new ObjectParameter("owner_id", ownerID) : new ObjectParameter("owner_id", typeof(int));
            ObjectParameter newDiagramnameParameter = newDiagramname != null ? new ObjectParameter("new_diagramname", newDiagramname) : new ObjectParameter("new_diagramname", typeof(string));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, ownerIDParameter, newDiagramnameParameter);
        }

        /// <summary>DB Procedure: [sp_upgraddiagrams]</summary>
        /// <returns>Number of rows affected</returns>
        public virtual int SPUpgraddiagram()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        #region Model Creation

        private static DbModel BuildModel()
        {
            DbModelBuilder builder = new DbModelBuilder();

            builder.Entity<Address>();
            builder.Entity<AddressLink>();
            builder.Entity<Document>();
            builder.Entity<Employer>();
            builder.Entity<EmployerAccountTransaction>();
            builder.Entity<EmployerContact>();
            builder.Entity<EmployerLiability>();
            builder.Entity<EmployerPreference>();
            builder.Entity<EmployerUnit>();
            builder.Entity<Form>();
            builder.Entity<FormAttachment>();
            builder.Entity<LookupCode>();
            builder.Entity<LookupName>();
            builder.Entity<LookupProperty>();
            builder.Entity<LookupValue>();
            builder.Entity<PaymentMain>();
            builder.Entity<PaymentProfile>();
            builder.Entity<SecurityDefinition>();
            builder.Entity<SecurityPermission>();
            builder.Entity<TaxableAmountSum>();
            builder.Entity<TaxRate>();
            builder.Entity<VoluntaryPlanWaiverRequest>();
            builder.Entity<VoluntaryPlanWaiverRequestType>();
            builder.Entity<WageUnitDetail>();

            builder.ComplexType<FNDiagramobjectResult>();

            DbEntities.Address.ModelCreating(builder);
            DbEntities.AddressLink.ModelCreating(builder);
            DbEntities.Document.ModelCreating(builder);
            DbEntities.Employer.ModelCreating(builder);
            DbEntities.EmployerAccountTransaction.ModelCreating(builder);
            DbEntities.EmployerContact.ModelCreating(builder);
            DbEntities.EmployerLiability.ModelCreating(builder);
            DbEntities.EmployerPreference.ModelCreating(builder);
            DbEntities.EmployerUnit.ModelCreating(builder);
            DbEntities.Form.ModelCreating(builder);
            DbEntities.FormAttachment.ModelCreating(builder);
            DbEntities.LookupCode.ModelCreating(builder);
            DbEntities.LookupName.ModelCreating(builder);
            DbEntities.LookupProperty.ModelCreating(builder);
            DbEntities.LookupValue.ModelCreating(builder);
            DbEntities.PaymentMain.ModelCreating(builder);
            DbEntities.PaymentProfile.ModelCreating(builder);
            DbEntities.SecurityDefinition.ModelCreating(builder);
            DbEntities.SecurityPermission.ModelCreating(builder);
            DbEntities.TaxableAmountSum.ModelCreating(builder);
            DbEntities.TaxRate.ModelCreating(builder);
            DbEntities.VoluntaryPlanWaiverRequest.ModelCreating(builder);
            DbEntities.VoluntaryPlanWaiverRequestType.ModelCreating(builder);
            DbEntities.WageUnitDetail.ModelCreating(builder);

            DbModel model = builder.Build(new DbProviderInfo("System.Data.SqlClient", "2008"));

            ReadOnlyCollection<PrimitiveType> storeTypes = model.ProviderManifest.GetStoreTypes();
            BuildFNDiagramobject(model, storeTypes);
            BuildSPAlterdiagram(model, storeTypes);
            BuildSPCreatediagram(model, storeTypes);
            BuildSPDropdiagram(model, storeTypes);
            BuildSPHelpdiagramdefinition(model, storeTypes);
            BuildSPHelpdiagram(model, storeTypes);
            BuildSPRenamediagram(model, storeTypes);
            BuildSPUpgraddiagram(model, storeTypes);

            return model;
        }

        private static EdmType GetEdmType(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes, PrimitiveTypeKind typeKind)
        {
            return model.ProviderManifest.GetStoreType(TypeUsage.CreateDefaultTypeUsage(PrimitiveType.GetEdmPrimitiveType(typeKind))).EdmType;
        }

        private static void AlterModel(FACTS.Framework.DAL.ModelAlteration model)
        {
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "CreateDateTime");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "CreateUserId");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateDateTime");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateNumber");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateProcess");
            model.InheritDuplicateField("Form", "VoluntaryPlanWaiverRequest", "UpdateUserId");
        }

        private static void BuildFNDiagramobject(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "fn_diagramobjects", IsComposable = true };
            payload.ReturnParameters = new List<FunctionParameter>();
            payload.ReturnParameters.Add(FunctionParameter.Create("Value", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.ReturnValue));
            EdmFunction function = EdmFunction.Create("fn_diagramobjects", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);
        }

        private static void BuildSPAlterdiagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_alterdiagram", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("version", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("definition", GetEdmType(model, storeTypes, PrimitiveTypeKind.Binary), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_alterdiagram", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("version", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("definition", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Binary), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_alterdiagram", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPCreatediagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_creatediagram", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("version", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("definition", GetEdmType(model, storeTypes, PrimitiveTypeKind.Binary), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_creatediagram", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("version", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("definition", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Binary), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_creatediagram", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPDropdiagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_dropdiagram", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_dropdiagram", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_dropdiagram", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPHelpdiagramdefinition(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_helpdiagramdefinition", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_helpdiagramdefinition", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_helpdiagramdefinition", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPHelpdiagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_helpdiagrams", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_helpdiagrams", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_helpdiagrams", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPRenamediagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_renamediagram", IsComposable = false };
            payload.Parameters = new List<FunctionParameter>();
            payload.Parameters.Add(FunctionParameter.Create("diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("owner_id", GetEdmType(model, storeTypes, PrimitiveTypeKind.Int32), ParameterMode.In));
            payload.Parameters.Add(FunctionParameter.Create("new_diagramname", GetEdmType(model, storeTypes, PrimitiveTypeKind.String), ParameterMode.In));
            EdmFunction function = EdmFunction.Create("sp_renamediagram", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            payloadImport.Parameters = new List<FunctionParameter>();
            payloadImport.Parameters.Add(FunctionParameter.Create("diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("owner_id", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.Int32), ParameterMode.In));
            payloadImport.Parameters.Add(FunctionParameter.Create("new_diagramname", PrimitiveType.GetEdmPrimitiveType(PrimitiveTypeKind.String), ParameterMode.In));
            EdmFunction functionImport = EdmFunction.Create("sp_renamediagram", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        private static void BuildSPUpgraddiagram(DbModel model, ReadOnlyCollection<PrimitiveType> storeTypes)
        {
            EdmFunctionPayload payload = new EdmFunctionPayload { Schema = "dbo", StoreFunctionName = "sp_upgraddiagrams", IsComposable = false };
            EdmFunction function = EdmFunction.Create("sp_upgraddiagrams", "CodeFirstDatabaseSchema", DataSpace.SSpace, payload, null);
            model.StoreModel.AddItem(function);

            EdmFunctionPayload payloadImport = new EdmFunctionPayload { IsFunctionImport = true, IsComposable = false };
            EdmFunction functionImport = EdmFunction.Create("sp_upgraddiagrams", "CodeFirstNamespace", DataSpace.CSpace, payloadImport, null);
            model.ConceptualModel.Container.AddFunctionImport(functionImport);

            FunctionImportResultMapping functionImportResultMapping = null;
            FunctionImportMappingNonComposable functionImportMapping = CreateFunctionImportMappingNonComposable(functionImport, function, functionImportResultMapping, model.ConceptualToStoreMapping);
            model.ConceptualToStoreMapping.AddFunctionImportMapping(functionImportMapping);
        }

        #endregion

    }

}
